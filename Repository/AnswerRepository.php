<?php

namespace CPASimUSante\SimupollBundle\Repository;

/**
 * ResponseRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnswerRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Delete answers when updating a simupoll.
     *
     * @param $pid integer paper id
     * @param $questionList array list of questions
     */
    public function deleteOldAnswersInCategories($pid, $questionList)
    {
        $qb = $this->_em->createQueryBuilder();

        $query = $qb->delete('CPASimUSanteSimupollBundle:Answer', 'a')
            ->where('a.question IN (:questionslist)')
            ->andWhere('a.paper = :pid')
            ->setParameter('pid', $pid)
            ->setParameter('questionslist', $questionList)
            ->getQuery();
        $query->execute();
    }

    public function getSimupollAllResponsesForAllUsersQuery($simupollId, $order)
    {
        return $this->getQuerySimupollAllResponsesForAllUsers($simupollId, $order)->getResult();
    }

    /**
     * @return array
     */
    public function getQuerySimupollAllResponsesForAllUsers($simupollId, $order)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')
            ->join('a.paper', 'p')
            ->join('p.simupoll', 's')
            ->where('s.id = :sid')
//            ->orderBy($order, 'ASC')
            ->setParameters(['sid' => $simupollId]);

        return $qb->getQuery();
    }

    /**
     * Retrieve Answers for a Simupoll and selected categories.
     *
     * @param $simupollId   integer id of simupoll
     * @param $categories   array selected categories
     * @param $order  string order of the query
     *
     * @return array of entities
     */
    public function getQuerySimupollAllResponsesInCategoriesForAllUsers($simupollId, $categories = array(), $order = '')
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')
            ->join('a.question', 'q')
            ->join('q.category', 'c')
            ->join('a.paper', 'p')
            ->join('p.simupoll', 's')
            ->where('s.id = :sid')
            ->andWhere('c.id IN (:categories)')
            ->orderBy('p.'.$order, 'ASC')
            ->setParameters(['sid' => $simupollId, 'categories' => $categories]);
//echo '<pre>';print_r(array('sql'=> $qb->getQuery()->getSQL(),'parameters' => $qb->getQuery()->getParameters(),));echo '</pre>';
        return $qb->getQuery()->getResult();
    }
    /**
     * Retrieve answers for question in.
     *
     * @param $sid
     * @param $pid
     * @param $current
     * @param $next
     *
     * @return array
     */
    public function getAnswersForQuestionsAndPapers($sid, $pids, $current = -1, $next = -1)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a.id, q.id as qid, a.answer')
            ->from('CPASimUSante\SimupollBundle\Entity\Answer', 'a')
            ->leftJoin('a.question', 'q')
            ->leftJoin('q.category', 'c')
            ->where('q.simupoll = :simupoll');
        if ($pids != []) {
            $qb->andWhere('a.paper IN (:paper)');
            $qb->setParameter('paper', $pids);
        }
        if ($current != -1) {
            $qb->andWhere('c.lft >=:current');
            $qb->setParameter('current', $current);
        }
        if ($next != -1) {
            $qb->andWhere('c.lft <=:next');
            $qb->setParameter('next', $next);
        }
        $qb->orderBy('q.id', 'ASC');
        $qb->setParameter('simupoll', $sid);
        //echo $qb->getQuery()->getSQL();
        return $qb->getQuery()->getResult();
    }

    /**
     * Retrieve answers for question in.
     *
     * @param $sid integer simupoll id
     * @param $pid
     * @param $current
     * @param $next
     *
     * @return array
     */
    public function getAnswersForQuestions($sid, $pid, $current = -1, $next = -1)
    {
        $qb = $this->_em->createQueryBuilder();
        //IDENTITY because period is composite key ... ???
        $qb->select('a.id, q.id as qid, a.answer, IDENTITY(p.period) as period')
            ->from('CPASimUSante\SimupollBundle\Entity\Answer', 'a')
            ->leftJoin('a.paper', 'p')
            ->leftJoin('a.question', 'q')
            ->leftJoin('q.category', 'c')
            ->where('q.simupoll = :simupoll');
        if ($pid != 0) {
            $qb->andWhere('a.paper = :paper');
            $qb->setParameter('paper', $pid);
        }
        if ($current != -1) {
            $qb->andWhere('c.lft >=:current');
            $qb->setParameter('current', $current);
        }
        if ($next != -1) {
            $qb->andWhere('c.lft <=:next');
            $qb->setParameter('next', $next);
        }
        $qb->orderBy('q.id', 'ASC');
        $qb->setParameter('simupoll', $sid);
        //echo $qb->getQuery()->getSQL();
        return $qb->getQuery()->getResult();
    }

    public function getAverageForExerciseByUser($sid)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('AVG(r.mark) as average_mark')
            ->addSelect('IDENTITY(p.user) as user')             //IDENTITY needed because user is a FK
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')     //thus, avoid problem with "overriding" Response entity in ExoverrideBundle
            ->join('a.paper', 'p')
            ->join('p.simupoll', 'e')
            ->where('e.id = ?1')
            ->groupBy('p.user')
            ->setParameters([1 => $simupollId]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Compute the avg mark for last try.
     *
     * @param $sid simupoll id
     *
     * @return array array of results
     */
    public function getAverageForSimupollLastTryByUser($sid)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('AVG(a.mark) as average_mark')
            ->addSelect('IDENTITY(p.user) as user')                         //IDENTITY needed because user is a FK
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')     //thus, avoid problem with "overriding" Response entity in ExoverrideBundle
            ->leftJoin('a.paper', 'p')
            ->leftJoin('p.simupoll', 's')
            ->where('s.id = ?1')
            ->andWhere(
               $qb->expr()->in(
                   'p.id',
                   $this->_em->createQueryBuilder()->select('MAX(p2.id)')
                       ->from('CPASimUSante\\SimupollBundle\\Entity\\Paper', 'p2')
                       ->where('p2.simupoll= ?1')
                       ->groupBy('p2.user')
                       ->getDQL()
               ))
            ->groupBy('p.user')
            ->setParameters([1 => $sid]);
        // echo $qb->getQuery()->getSQL().'<br><br>';
        return $qb->getQuery()->getResult();
    }

    public function getAverageForSimupollForUserAndPeriod1($sid, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('AVG(a.mark) as average_mark')                   //IDENTITY needed because user is a FK
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')     //thus, avoid problem with "overriding" Response entity in ExoverrideBundle
            ->leftJoin('a.paper', 'p')
            ->leftJoin('p.simupoll', 's')
            ->where('s.id = ?1')
            ->andWhere(
               $qb->expr()->in(
                   'p.id',
                   $this->_em->createQueryBuilder()->select('MAX(p2.id)')
                       ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a2')
                       ->leftJoin('a2.paper', 'p2')
                       ->where('p2.simupoll= ?1')
                       ->andWhere('p2.user = ?2')
                       ->getDQL()
               ))
            ->andWhere('p.user = ?2')
            ->setParameter(1, $sid)
            ->setParameter(2, $user);
        // echo $qb->getQuery()->getSQL().'<br><br>';
        return $qb->getQuery()->getResult();
    }

    /**
     * Retrieve averages, grouped by user and period.
     *
     * @param $sid integer id of simupoll
     * @param $categories array list of categories selected in Statmanage
     * @param $userlist array list of user for the stats
     *
     * @return $result array array of results
     */
    public function getAverageForSimupollInCategoriesByUserAndPeriod($sid, $categories, $userlist)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('AVG(a.mark) as average_mark')
            ->addSelect('IDENTITY(p.user) as user')
            ->addSelect('IDENTITY(p.period) as period')
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')
            ->leftJoin('a.paper', 'p')
            ->leftJoin('p.simupoll', 's')
            ->leftJoin('a.question', 'q')
            ->leftJoin('q.category', 'c')
            ->where('s.id = ?1')
            ->andWhere('c.id IN (?2)')
            ->andWhere('p.user IN (?3)')
            ->setParameter(1, $sid)
            ->setParameter(2, $categories)
            ->setParameter(3, $userlist)
            ->groupBy('p.user, p.period');
// echo $qb->getQuery()->getSQL().'<br>';
// echo '<pre>';var_dump($qb->getQuery()->getParameters());echo '</pre><br><br>';
        return $qb->getQuery()->getResult();
    }

    /**
     * Retrieve general average for a period.
     *
     * @param $sid integer id of simupoll
     * @param $categories array list of categories selected in Statmanage
     * @param $userlist array list of user for the stats
     *
     * @return $result array array of results
     */
    public function getGeneralAverageForSimupollInCategoriesByPeriod($sid, $categories)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('AVG(a.mark) as average_mark')
            ->addSelect('IDENTITY(p.period) as period')
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')
            ->leftJoin('a.paper', 'p')
            ->leftJoin('p.simupoll', 's')
            ->leftJoin('a.question', 'q')
            ->leftJoin('q.category', 'c')
            ->where('s.id = ?1')
            ->andWhere('c.id IN (?2)')
            ->setParameter(1, $sid)
            ->setParameter(2, $categories)
            ->groupBy('p.period');
// echo $qb->getQuery()->getSQL().'<br>';
// echo '<pre>';var_dump($qb->getQuery()->getParameters());echo '</pre><br><br>';
        return $qb->getQuery()->getResult();
    }

    /**
     * Retrieve general average for all periods.
     *
     * @param $sid integer id of simupoll
     * @param $categories array list of categories selected in Statmanage
     * @param $userlist array list of user for the stats
     *
     * @return $result array array of results
     */
    public function getGeneralAverageForSimupollInCategoriesAllPeriod($sid, $categories)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('AVG(a.mark) as average_mark')
            ->from('CPASimUSante\\SimupollBundle\\Entity\\Answer', 'a')
            ->leftJoin('a.paper', 'p')
            ->leftJoin('p.simupoll', 's')
            ->leftJoin('a.question', 'q')
            ->leftJoin('q.category', 'c')
            ->where('s.id = ?1')
            ->andWhere('c.id IN (?2)')
            ->setParameter(1, $sid)
            ->setParameter(2, $categories);
// echo $qb->getQuery()->getSQL().'<br>';
// echo '<pre>';var_dump($qb->getQuery()->getParameters());echo '</pre><br><br>';
        return $qb->getQuery()->getResult();
    }
}
